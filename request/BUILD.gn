# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")
import("//plugins/request/request.gni")

template("plugin_request_static") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    defines += invoker.defines
    cflags_cc += invoker.cflags_cc

    include_dirs = [
      "$rq_task_path/interfaces/kits/napi/include",
      "$rq_task_path/utils/include",
      "$rq_utils_path",
      "$plugin_interfaces_path",
    ]

    if (platform == "android") {
      include_dirs += [ "$rq_task_path/frameworks/android" ]
    }

    sources = [ "$rq_module_path/request_module.cpp" ]

    deps = [
      "$plugin_interfaces_path/native:ace_plugin_util_${platform}",
      "$plugin_interfaces_path/native:plugin_log",
      "$rq_task_path/interfaces/kits/napi:task_napi",
      "//plugins/libs/napi:napi_${target_os}",
    ]

    if (platform == "android") {
      defines += [ "ANDROID_PLATFORM" ]
      libs = [ "log" ]
    } else if (platform == "ios") {
      defines += [ "IOS_PLATFORM" ]
      libs = [ "sqlite3" ]
    }

    defines += [
      "REQUEST_LOG_DOMAIN = 0xD001C00",
      "REQUEST_LOG_TAG = \"RequestJs\"",
    ]

    subsystem_name = "plugins"
    part_name = "request"
  }
}

foreach(item, ace_platforms) {
  plugin_request_static("request_static_" + item.name) {
    platform = item.name

    defines = []
    cflags_cc = []
    config = {
    }

    if (defined(item.config)) {
      config = item.config
    }

    if (defined(config.defines)) {
      defines = config.defines
    }

    if (defined(config.cflags_cc)) {
      cflags_cc = config.cflags_cc
    }
  }
}
