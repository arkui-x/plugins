# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")

action("untar_abseil-cpp") {
  script = "untar_abseil-cpp.sh"
  libabseil_path = rebase_path("//third_party/abseil-cpp")
  out_path = rebase_path("$root_out_dir")
  args = [
    "$libabseil_path",
    "$out_path",
  ]
  ABSEIL_DIR = "$root_out_dir/abseil-cpp"
  outputs = [
    "${ABSEIL_DIR}/absl/base/internal/cycleclock.cc",
    "${ABSEIL_DIR}/absl/base/internal/low_level_alloc.cc",
    "${ABSEIL_DIR}/absl/base/internal/raw_logging.cc",
    "${ABSEIL_DIR}/absl/base/internal/spinlock.cc",
    "${ABSEIL_DIR}/absl/base/internal/spinlock_akaros.inc",
    "${ABSEIL_DIR}/absl/base/internal/spinlock_linux.inc",
    "${ABSEIL_DIR}/absl/base/internal/spinlock_posix.inc",
    "${ABSEIL_DIR}/absl/base/internal/spinlock_wait.cc",
    "${ABSEIL_DIR}/absl/base/internal/spinlock_win32.inc",
    "${ABSEIL_DIR}/absl/base/internal/sysinfo.cc",
    "${ABSEIL_DIR}/absl/base/internal/thread_identity.cc",
    "${ABSEIL_DIR}/absl/base/internal/throw_delegate.cc",
    "${ABSEIL_DIR}/absl/base/internal/unscaledcycleclock.cc",
    "${ABSEIL_DIR}/absl/base/log_severity.cc",
    "${ABSEIL_DIR}/absl/numeric/int128.cc",
    "${ABSEIL_DIR}/absl/numeric/int128_have_intrinsic.inc",
    "${ABSEIL_DIR}/absl/numeric/int128_no_intrinsic.inc",
    "${ABSEIL_DIR}/absl/strings/ascii.cc",
    "${ABSEIL_DIR}/absl/strings/charconv.cc",
    "${ABSEIL_DIR}/absl/strings/escaping.cc",
    "${ABSEIL_DIR}/absl/strings/internal/charconv_bigint.cc",
    "${ABSEIL_DIR}/absl/strings/internal/charconv_bigint.h",
    "${ABSEIL_DIR}/absl/strings/internal/charconv_parse.cc",
    "${ABSEIL_DIR}/absl/strings/internal/charconv_parse.h",
    "${ABSEIL_DIR}/absl/strings/internal/escaping.cc",
    "${ABSEIL_DIR}/absl/strings/internal/memutil.cc",
    "${ABSEIL_DIR}/absl/strings/internal/memutil.h",
    "${ABSEIL_DIR}/absl/strings/internal/ostringstream.cc",
    "${ABSEIL_DIR}/absl/strings/internal/stl_type_traits.h",
    "${ABSEIL_DIR}/absl/strings/internal/str_join_internal.h",
    "${ABSEIL_DIR}/absl/strings/internal/str_split_internal.h",
    "${ABSEIL_DIR}/absl/strings/internal/utf8.cc",
    "${ABSEIL_DIR}/absl/strings/match.cc",
    "${ABSEIL_DIR}/absl/strings/numbers.cc",
    "${ABSEIL_DIR}/absl/strings/str_cat.cc",
    "${ABSEIL_DIR}/absl/strings/str_replace.cc",
    "${ABSEIL_DIR}/absl/strings/str_split.cc",
    "${ABSEIL_DIR}/absl/strings/string_view.cc",
    "${ABSEIL_DIR}/absl/strings/substitute.cc",
  ]
}

template("plugin_i18n_static") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    defines += invoker.defines
    cflags_cc += invoker.cflags_cc
    use_exceptions = true
    include_dirs = [
      "include",
      "$ace_root",
      "$ace_root/frameworks",
      "$root_out_dir/arkui/framework",
      "//third_party/icu/icu4c/source",
      "//third_party/icu/icu4c/source/common",
      "//third_party/icu/icu4c/source/i18n",
      "//third_party/icu/icu4c/source/common/unicode",
      "//plugins/hilog/include",
      "//plugins/interfaces",
    ]

    sources = [
      "//third_party/icu/ohos_icu4j/data/lite/icudt72l_dat.S",
      "framework/character.cpp",
      "framework/error_util.cpp",
      "framework/i18n_break_iterator.cpp",
      "framework/i18n_calendar.cpp",
      "framework/i18n_normalizer.cpp",
      "framework/i18n_timezone.cpp",
      "framework/icu_data.cpp",
      "framework/index_util.cpp",
      "framework/locale_config.cpp",
      "framework/locale_info.cpp",
      "framework/phone_number_format.cpp",
      "framework/plural_rules.cpp",
      "framework/utils.cpp",
      "i18n_addon.cpp",
    ]

    # libphonnumber
    LIBPHONE_DIR = "//third_party/libphonenumber/cpp"

    sources += [
      "${LIBPHONE_DIR}/src/phonenumbers/alternate_format.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/asyoutypeformatter.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/base/strings/string_piece.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/default_logger.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/logger.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/metadata.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/phonemetadata.pb.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/phonenumber.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/phonenumber.pb.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/phonenumbermatch.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/phonenumbermatcher.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/phonenumberutil.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/regex_based_matcher.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/regexp_adapter_icu.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/regexp_cache.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/short_metadata.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/shortnumberinfo.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/string_byte_sink.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/stringutil.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/unicodestring.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/utf/rune.c",
      "${LIBPHONE_DIR}/src/phonenumbers/utf/unicodetext.cc",
      "${LIBPHONE_DIR}/src/phonenumbers/utf/unilib.cc",
    ]

    include_dirs += [
      "//third_party/libphonenumber/",
      "//third_party/libphonenumber/cpp/src",
      "//third_party/protobuf/src",
      "//third_party/protobuf/src/google",
      "//third_party/protobuf/src/google/protobuf",
    ]

    # abseil-cpp
    ABSEIL_DIR = "$root_out_dir/abseil-cpp"

    sources += [
      "${ABSEIL_DIR}/absl/base/internal/cycleclock.cc",
      "${ABSEIL_DIR}/absl/base/internal/low_level_alloc.cc",
      "${ABSEIL_DIR}/absl/base/internal/raw_logging.cc",
      "${ABSEIL_DIR}/absl/base/internal/spinlock.cc",
      "${ABSEIL_DIR}/absl/base/internal/spinlock_akaros.inc",
      "${ABSEIL_DIR}/absl/base/internal/spinlock_linux.inc",
      "${ABSEIL_DIR}/absl/base/internal/spinlock_posix.inc",
      "${ABSEIL_DIR}/absl/base/internal/spinlock_wait.cc",
      "${ABSEIL_DIR}/absl/base/internal/spinlock_win32.inc",
      "${ABSEIL_DIR}/absl/base/internal/sysinfo.cc",
      "${ABSEIL_DIR}/absl/base/internal/thread_identity.cc",
      "${ABSEIL_DIR}/absl/base/internal/throw_delegate.cc",
      "${ABSEIL_DIR}/absl/base/internal/unscaledcycleclock.cc",
      "${ABSEIL_DIR}/absl/base/log_severity.cc",
      "${ABSEIL_DIR}/absl/numeric/int128.cc",
      "${ABSEIL_DIR}/absl/numeric/int128_have_intrinsic.inc",
      "${ABSEIL_DIR}/absl/numeric/int128_no_intrinsic.inc",
      "${ABSEIL_DIR}/absl/strings/ascii.cc",
      "${ABSEIL_DIR}/absl/strings/charconv.cc",
      "${ABSEIL_DIR}/absl/strings/escaping.cc",
      "${ABSEIL_DIR}/absl/strings/internal/charconv_bigint.cc",
      "${ABSEIL_DIR}/absl/strings/internal/charconv_bigint.h",
      "${ABSEIL_DIR}/absl/strings/internal/charconv_parse.cc",
      "${ABSEIL_DIR}/absl/strings/internal/charconv_parse.h",
      "${ABSEIL_DIR}/absl/strings/internal/escaping.cc",
      "${ABSEIL_DIR}/absl/strings/internal/memutil.cc",
      "${ABSEIL_DIR}/absl/strings/internal/memutil.h",
      "${ABSEIL_DIR}/absl/strings/internal/ostringstream.cc",
      "${ABSEIL_DIR}/absl/strings/internal/stl_type_traits.h",
      "${ABSEIL_DIR}/absl/strings/internal/str_join_internal.h",
      "${ABSEIL_DIR}/absl/strings/internal/str_split_internal.h",
      "${ABSEIL_DIR}/absl/strings/internal/utf8.cc",
      "${ABSEIL_DIR}/absl/strings/match.cc",
      "${ABSEIL_DIR}/absl/strings/numbers.cc",
      "${ABSEIL_DIR}/absl/strings/str_cat.cc",
      "${ABSEIL_DIR}/absl/strings/str_replace.cc",
      "${ABSEIL_DIR}/absl/strings/str_split.cc",
      "${ABSEIL_DIR}/absl/strings/string_view.cc",
      "${ABSEIL_DIR}/absl/strings/substitute.cc",
    ]

    include_dirs += [ "${ABSEIL_DIR}/" ]

    PROTOBUF_DIR = "//third_party/protobuf"
    sources += [
      "${PROTOBUF_DIR}/src/google/protobuf/any_lite.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/arena.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/extension_set.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/generated_enum_util.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/generated_message_table_driven_lite.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/generated_message_util.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/implicit_weak_message.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/io/coded_stream.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/io/io_win32.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/io/strtod.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/io/zero_copy_stream.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/io/zero_copy_stream_impl.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/io/zero_copy_stream_impl_lite.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/message_lite.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/parse_context.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/repeated_field.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/stubs/bytestream.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/stubs/common.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/stubs/int128.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/stubs/status.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/stubs/statusor.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/stubs/stringpiece.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/stubs/stringprintf.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/stubs/structurally_valid.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/stubs/strutil.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/stubs/time.cc",
      "${PROTOBUF_DIR}/src/google/protobuf/wire_format_lite.cc",
    ]
    include_dirs += [
      "${PROTOBUF_DIR}/src",
      "${PROTOBUF_DIR}/src/google/protobuf/**/*.h",
      "${PROTOBUF_DIR}/src/google/protobuf/**/*.inc",
    ]

    defines += [
      "I18N_PHONENUMBERS_USE_ALTERNATE_FORMATS",
      "I18N_PHONENUMBERS_USE_ICU_REGEXP",
      "HAVE_PTHREAD",
    ]

    deps = [
      ":untar_abseil-cpp",
      "//plugins/interfaces/native:ace_plugin_util_${platform}",
      "//plugins/interfaces/native:plugin_log",
      "//plugins/libs/icu:icu_${target_os}",
      "//plugins/libs/napi:napi_${target_os}",
    ]

    if (platform == "android") {
      deps += [ "android/java:i18n_plugin_android_jni" ]
    } else if (platform == "ios") {
      deps += [ "ios:i18n_plugin_ios" ]
    }

    subsystem_name = "plugins"
    part_name = "i18n"
  }
}

foreach(item, ace_platforms) {
  plugin_i18n_static("i18n_static_" + item.name) {
    platform = item.name

    defines = []
    cflags_cc = []
    config = {
    }

    if (defined(item.config)) {
      config = item.config
    }

    if (defined(config.defines)) {
      defines = config.defines
    }

    if (defined(config.cflags_cc)) {
      cflags_cc = config.cflags_cc
    }
  }
}
