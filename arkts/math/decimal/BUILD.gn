# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/ets_frontend/es2abc_config.gni")
import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")
import("//foundation/arkui/ace_engine/build/ace_gen_obj.gni")

es2abc_gen_abc("gen_decimal_abc") {
  src_js = rebase_path("//third_party/decimal.js/decimal.mjs")
  dst_file = rebase_path(target_out_dir + "/decimal.abc")
  in_puts = [ "//third_party/decimal.js/decimal.mjs" ]
  out_puts = [ target_out_dir + "/decimal.abc" ]
  extra_args = [ "--module" ]
}

if (target_os == "ios") {
  gen_obj("decimal_abc") {
    input =
        get_label_info(":gen_decimal_abc", "target_out_dir") + "/decimal.abc"
    output = target_out_dir + "/decimal_abc.c"
    snapshot_dep = [ ":gen_decimal_abc" ]
  }

  gen_obj("decimal_mjs") {
    input = rebase_path("//third_party/decimal.js/decimal.mjs")
    output = target_out_dir + "/decimal_mjs.c"
    snapshot_dep = []
  }
} else if (target_os == "android") {
  gen_js_obj("decimal_abc") {
    input =
        get_label_info(":gen_decimal_abc", "target_out_dir") + "/decimal.abc"
    output = target_out_dir + "/decimal_abc.o"
    dep = ":gen_decimal_abc"
  }

  gen_js_obj("decimal_mjs") {
    input = rebase_path("//third_party/decimal.js/decimal.mjs")
    output = target_out_dir + "/decimal_mjs.o"
  }
}

template("plugin_arkts_math_decimal_static") {
  forward_variables_from(invoker, "*")
  ohos_source_set(target_name) {
    defines += invoker.defines
    cflags_cc += invoker.cflags_cc

    sources = [ "decimal.cpp" ]

    deps = [ "//plugins/libs/napi:napi_${target_os}" ]

    if (target_os == "ios") {
      deps += [
        ":gen_obj_src_decimal_abc",
        ":gen_obj_src_decimal_mjs",
      ]
    } else if (target_os == "android") {
      deps += [
        ":decimal_abc",
        ":decimal_mjs",
      ]
    }

    subsystem_name = "plugins"
    part_name = "arkts_math_decimal"
  }
}

foreach(item, ace_platforms) {
  plugin_arkts_math_decimal_static("arkts_math_decimal_static_" + item.name) {
    defines = []
    cflags_cc = []
    config = {
    }

    if (defined(item.config)) {
      config = item.config
    }

    if (defined(config.defines)) {
      defines = config.defines
    }

    if (defined(config.cflags_cc)) {
      cflags_cc = config.cflags_cc
    }
  }
}
