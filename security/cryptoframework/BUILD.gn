# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")

template("plugin_cryptoframework_static") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    defines += invoker.defines
    cflags_cc += invoker.cflags_cc
    include_dirs = [
      "//third_party/bounds_checking_function/include",
      "//commonlibrary/c_utils/base/include",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/inc",
      "//base/security/crypto_framework/common/inc",
      "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
    ]
    sources = [
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_asy_key_generator.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_asy_key_spec_generator.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_cipher.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_dh_key_util.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_ecc_key_util.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_init.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_kdf.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_key.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_key_agreement.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_key_pair.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_mac.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_md.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_pri_key.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_pub_key.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_rand.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_sign.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_sm2_crypto_util.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_sm2_ec_signature.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_sym_key.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_sym_key_generator.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_utils.cpp",
      "//base/security/crypto_framework/frameworks/js/napi/crypto/src/napi_verify.cpp",
    ]

    deps = [
      "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog_${target_os}",
      "//plugins/interfaces/native:ace_plugin_util_${platform}",
      "//plugins/libs/napi:napi_${target_os}",
      "//plugins/libs/securec:sec_${target_os}",
      "//plugins/security/cryptoframework/common:crypto_plugin_common",
      "//plugins/security/cryptoframework/frameworks:crypto_framework_lib",
    ]

    subsystem_name = "plugins"
    part_name = "cryptoframework"
  }
}

foreach(item, ace_platforms) {
  plugin_cryptoframework_static(
      "security_cryptoframework_static_" + item.name) {
    platform = item.name

    defines = []
    cflags_cc = []
    config = {
    }

    if (defined(item.config)) {
      config = item.config
    }

    if (defined(config.defines)) {
      defines = config.defines
    }

    if (defined(config.cflags_cc)) {
      cflags_cc = config.cflags_cc
    }
  }
}
