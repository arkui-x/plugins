# Copyright (c) 2023-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")
import("web_webview.gni")

template("plugin_web_webview_static") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    defines += invoker.defines
    cflags_cc += invoker.cflags_cc
    use_exceptions = true

    include_dirs = web_include
    include_dirs += [
      "//commomlibrary/c_utils/base/include",
      "//plugins/interfaces/native",
    ]

    sources = web_source
    sources += [
      "js_web_webview.cpp",
      "napi_parse_utils.cpp",
      "napi_web_message_ext.cpp",
      "web_cookie_manager.cpp",
      "web_cookie_manager_callback.cpp",
      "web_download_delegate.cpp",
      "web_download_item.cpp",
      "web_download_manager.cpp",
      "web_message_port.cpp",
      "webview_async_work_callback.cpp",
      "webview_controller.cpp",
      "webview_javascript_async_work_callback.cpp",
    ]

    deps = [
      "//plugins/interfaces/native:ace_plugin_util_${platform}",
      "//plugins/libs/napi:napi_${target_os}",
    ]

    if (platform == "android") {
      deps += [ "android/java:web_webview_android_jni" ]
    } else if (platform == "ios") {
      deps += [ "ios:web_webview_ios" ]
    }

    subsystem_name = "plugins"
    part_name = "web_webview"
  }
}

foreach(item, ace_platforms) {
  plugin_web_webview_static("web_webview_static_" + item.name) {
    platform = item.name

    defines = []
    cflags_cc = []
    config = {
    }

    if (defined(item.config)) {
      config = item.config
    }

    if (defined(config.defines)) {
      defines = config.defines
    }

    if (defined(config.cflags_cc)) {
      cflags_cc = config.cflags_cc
    }
  }
}
