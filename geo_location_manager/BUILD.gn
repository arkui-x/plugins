# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//plugins/geo_location_manager/geolocationmanager.gni")

template("plugin_geo_location_manager_static") {
  forward_variables_from(invoker, "*")

  ohos_source_set("locationmanager_mock") {
    sources = [
      "$GEOLOCATIONMANAGER_ROOT/mock/ipc_object_stub.cpp",
      "$GEOLOCATIONMANAGER_ROOT/mock/iremote_broker.cpp",
      "$GEOLOCATIONMANAGER_ROOT/mock/iremote_object.cpp",
    ]
    deps = [ "$c_utils_root/base:utilsbase" ]

    part_name = "geo_location_manager"
    subsystem_name = "plugins"
  }

  ohos_source_set(target_name) {
    defines += invoker.defines
    cflags_cc += invoker.cflags_cc

    include_dirs = geoLocationManager_include
    sources = geoLocationManager_source

    deps = [
      ":locationmanager_mock",
      "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog_${platform}",
      "//foundation/appframework/ability/ability_runtime/cross_platform/frameworks/native/base/event_handler:cross_platform_event_handler",
      "//plugins/interfaces/native:ace_plugin_util_${platform}",
      "//plugins/interfaces/native:plugin_log",
      "//plugins/libs/napi:napi_${target_os}",
    ]

    if (platform == "android") {
      defines += [ "ANDROID_PLATFORM" ]
      deps += [ "frameworks/adapter/android:geolocationmanager_android_jni" ]
    } else if (platform == "ios") {
      defines += [ "IOS_PLATFORM" ]
      deps += [ "frameworks/adapter/ios:geolocationmanager_ios" ]
    }

    subsystem_name = "plugins"
    part_name = "geo_location_manager"
  }
}

foreach(item, ace_platforms) {
  plugin_geo_location_manager_static("geo_location_manager_static_" + item.name) {
    platform = item.name

    defines = [
      "ENABLE_NAPI_MANAGER",
      "NOTIFICATION_ENABLE",
    ]
    cflags_cc = []
    config = {
    }

    if (defined(item.config)) {
      config = item.config
    }

    if (defined(config.defines)) {
      defines += config.defines
    }

    if (defined(config.cflags_cc)) {
      cflags_cc = config.cflags_cc
    }
  }
}