# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")

template("plugin_notification_manager_static") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    defines += invoker.defines
    cflags_cc += invoker.cflags_cc
    include_dirs = [
      "//base/notification/distributed_notification_service/frameworks/core/include",
      "//plugins/interfaces/native",
      "//foundation/appframework/ability/ability_runtime/cross_platform/frameworks/js/napi/napi_common",
      "//plugins/notification_manager",
      "//third_party/json/include",
    ]

    sources = [
      "ans_convert_enum.cpp",
      "common.cpp",
      "common_convert_content.cpp",
      "common_convert_request.cpp",
      "common_utils.cpp",
      "constant.cpp",
      "init_module.cpp",
      "napi_cancel.cpp",
      "napi_display_badge.cpp",
      "napi_enable_notification.cpp",
      "napi_publish.cpp",
      "notification_basic_content.cpp",
      "notification_content.cpp",
      "notification_helper.cpp",
      "notification_long_text_content.cpp",
      "notification_multiline_content.cpp",
      "notification_normal_content.cpp",
      "notification_request.cpp",
    ]

    deps = [
      "//commonlibrary/c_utils/base:utilsbase",
      "//foundation/appframework/ability/ability_runtime/cross_platform/interfaces/inner_api/napi_base_context:napi_base_context",
      "//plugins/interfaces/native:ace_plugin_util_${platform}",
      "//plugins/interfaces/native:napi_common",
      "//plugins/interfaces/native:plugin_log",
    ]

    if (platform == "android") {
      deps += [ "android/java:notification_manager_android_jni" ]
    } else if (platform == "ios") {
      deps += [ "ios:notification_manager_ios" ]
    }

    subsystem_name = "plugins"
    part_name = "notification_manager"
  }
}

foreach(item, ace_platforms) {
  plugin_notification_manager_static(
      "notification_manager_static_" + item.name) {
    platform = item.name

    defines = []
    cflags_cc = []
    config = {
    }

    if (defined(item.config)) {
      config = item.config
    }

    if (defined(config.defines)) {
      defines = config.defines
    }

    if (defined(config.cflags_cc)) {
      cflags_cc = config.cflags_cc
    }
  }
}
